//
//  CreateBugViewController.m
//  Projects On The Go
//
//  Created by Samir Bhide on 20/06/13.
//  Copyright (c) 2013 raweng. All rights reserved.
//

#import "CreateBugViewController.h"
#import "MBProgressHUD.h"

@interface CreateBugViewController () <UITextViewDelegate,UIPickerViewDelegate, UIActionSheetDelegate>{
    UITextView *currentTextView;
    
}
@property (nonatomic, strong)NSArray *severity;
@property (nonatomic, strong)NSArray *reproducible;
@property (nonatomic, strong)UIPickerView *pickerView;
@property (nonatomic, strong)UIDatePicker *datePicker;
@property (nonatomic, strong)UIActionSheet *actionSheet;
@property (nonatomic, strong)UIToolbar *pickerDateToolbar;
@property (nonatomic, strong)NSString *selectedItem;
@property (nonatomic, strong)NSMutableArray *datasource;
@property (weak, nonatomic) IBOutlet UITextView *bugTitle;
@property (weak, nonatomic) IBOutlet UITextView *bugDescription;
@property (nonatomic, strong)NSDate *bugDate;
@property (nonatomic, strong)NSString *bugSeverity;
@property (nonatomic, strong)NSString *bugReproducible;
@end

@implementation CreateBugViewController
@synthesize bugProperties;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@"Done" style:UIBarButtonItemStyleDone target:self action:@selector(doneButtonClick)];
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleDone target:self action:@selector(dismissSelf)];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardShow:) name:UIKeyboardDidShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardHide:) name:UIKeyboardDidHideNotification object:nil];
}

-(void)viewWillDisappear:(BOOL)animated {
    [super viewWillDisappear:animated];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    
    [self.view setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageNamed:@"body_bg"]]];
    
    self.datasource = [NSMutableArray array];
    
    self.severity = [NSArray arrayWithObjects:@"Show Stopper",@"Critical",@"Major",@"Minor", nil];
    self.reproducible = [NSArray arrayWithObjects:@"Always",@"Sometimes",@"Rarely",@"Unable", nil];
    
    self.title = @"Create a Bug";
    
    
    self.actionSheet = [[UIActionSheet alloc] initWithTitle:@"How many?"
                                                   delegate:self
                                          cancelButtonTitle:nil
                                     destructiveButtonTitle:nil
                                          otherButtonTitles:nil];
    
    self.pickerView = [[UIPickerView alloc] initWithFrame:CGRectMake(0.0, 44.0, 0.0, 0.0)];
    
    self.pickerView.showsSelectionIndicator = YES;
    self.pickerView.delegate = self;
    
    self.datePicker = [[UIDatePicker alloc]initWithFrame:CGRectMake(0.0, 44.0, 0.0, 0.0)];
//    [self.datePicker setCenter:CGPointMake(self.view.frame.size.width / 2, self.view.frame.size.width / 2)];
    self.datePicker.datePickerMode = UIDatePickerModeDateAndTime;
    [self.datePicker addTarget:self
                        action:@selector(changeDateInLabel:)
              forControlEvents:UIControlEventValueChanged];
    
    self.pickerDateToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
    self.pickerDateToolbar.barStyle = UIBarStyleBlackOpaque;
    [self.pickerDateToolbar sizeToFit];
    
    NSMutableArray *barItems = [[NSMutableArray alloc] init];
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    [barItems addObject:flexSpace];
    
    UIBarButtonItem *doneBtn = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(DatePickerDoneClick)];
    [barItems addObject:doneBtn];
    
    [self.pickerDateToolbar setItems:barItems animated:YES];
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
#pragma mark Button Clicks
-(void) doneButtonClick {
    
//    NSLog(@"bug date%@",self.bugDate);
//    NSLog(@"bug repro%@",self.bugReproducible);
//    NSLog(@"bug severity%@",self.bugSeverity);
    
    BuiltObject *bug = [BuiltObject objectWithClassUID:CLASSUID_BUGS];
    [bug setObject:self.bugTitle.text forKey:@"name"];
    [bug setObject:self.bugDescription.text forKey:@"description"];
    [bug setObject:self.bugReproducible forKey:@"reproducible"];
    [bug setObject:self.bugDate forKey:@"due_date"];
    [bug setObject:self.bugSeverity forKey:@"severity"];
//    [bug setObject:@"" forKey:@"status"];
    [bug setReference:self.project.uid forKey:@"project"];
    NSLog(@"project %@",self.project);

    BuiltACL *bugACL = [BuiltACL ACL];
    
    //members have read access for a bug
    [[self.project objectForKey:@"members"] enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        NSLog(@"1");
        [bugACL setRoleReadAccess:YES forRoleUID:obj];
    }];
    
    //moderators have read, update, delete access for a bug
    [[self.project objectForKey:@"moderators"] enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        NSLog(@"2");
        [bugACL setRoleReadAccess:YES forRoleUID:obj];
        [bugACL setRoleWriteAccess:YES forRoleUID:obj];
        [bugACL setRoleDeleteAccess:YES forRoleUID:obj];
    }];
    
    [bug setACL:bugACL];

    MBProgressHUD *creatingBugHUD = [MBProgressHUD showHUDAddedTo:self.view animated:YES];
    [creatingBugHUD setLabelText:@"Creating Bug..."];

    [bug saveOnSuccess:^{
        [creatingBugHUD setLabelText:@"Bug Created!"];
        [creatingBugHUD hide:YES afterDelay:0.5];
        [self dismissViewControllerAnimated:YES completion:nil];
        NSLog(@"saved %@",bug);
    } onError:^(NSError *error) {
        [creatingBugHUD setLabelText:@"Error Creating Bug!"];
        [creatingBugHUD hide:YES afterDelay:0.5];
        NSLog(@"error creating bug %@",error.userInfo);
    }];
}

- (void)dismissSelf{
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark UITextViewDelegate

-(void)textViewDidBeginEditing:(UITextView *)textView {
    currentTextView = textView;
}

#pragma mark KeyBoard NotificationHandler

-(void)keyboardShow:(id)sender{
    [UIView animateWithDuration:0.2 animations:^{
        [self.mainScrollView setFrame:CGRectMake(0, 0, CGRectGetWidth(self.mainScrollView.frame), CGRectGetHeight(self.view.frame) - kKeyBoardShowHeight)];
    }];
    
}

-(void)keyboardHide:(id)sender {
    [UIView animateWithDuration:0.2 animations:^{
        [self.mainScrollView setFrame:CGRectMake(0, 0, CGRectGetWidth(self.mainScrollView.frame), CGRectGetHeight(self.view.frame))];
    }];
    
}

#pragma mark UITapGestureSelector

- (IBAction)hadleTap:(id)sender {
    [currentTextView resignFirstResponder];
    
}

- (void)changeDateInLabel:(id)sender{
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
	df.dateStyle = NSDateFormatterMediumStyle;
	NSString *selDate = [NSString stringWithFormat:@"%@",
                         [df stringFromDate:self.datePicker.date]];
    self.selectedItem = selDate;
}

#pragma mark UIPickerViewDelegate

-(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component{
    self.selectedItem = [self.datasource objectAtIndex:row];
}
-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component{
    return self.datasource.count;
}

-(NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component{
    return [self.datasource objectAtIndex:row];
}

-(CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component{
    return 300;
}

- (IBAction)severityAction:(id)sender {
    [self setBugProperties:SEVERITY];
    
    if ([[self.actionSheet subviews]containsObject:self.pickerView] && [[self.actionSheet subviews]containsObject:self.pickerDateToolbar]) {
        [self.pickerDateToolbar removeFromSuperview];
        [self.pickerView removeFromSuperview];
        [self.datePicker removeFromSuperview];
    }
    
    [self.datasource removeAllObjects];
    [self.datasource addObjectsFromArray:self.severity];
    
    [self.pickerView reloadAllComponents];
    
    [self.actionSheet addSubview:self.pickerDateToolbar];
    [self.actionSheet addSubview:self.pickerView];
    [self.actionSheet showInView:self.view];
    [self.actionSheet setBounds:CGRectMake(0,0,320, 475)];
    
    self.selectedItem = [self.datasource objectAtIndex:[self.pickerView selectedRowInComponent:0]];
}

- (IBAction)reproducibleAction:(id)sender {
    [self setBugProperties:REPRODUCIBLE];
    
    if ([[self.actionSheet subviews]containsObject:self.pickerView] && [[self.actionSheet subviews]containsObject:self.pickerDateToolbar]) {
        [self.pickerDateToolbar removeFromSuperview];
        [self.pickerView removeFromSuperview];
        [self.datePicker removeFromSuperview];
    }
    [self.datasource removeAllObjects];
    [self.datasource addObjectsFromArray:self.reproducible];
    
    [self.pickerView reloadAllComponents];
    
    [self.actionSheet addSubview:self.pickerDateToolbar];
    [self.actionSheet addSubview:self.pickerView];
    [self.actionSheet showInView:self.view];
    [self.actionSheet setBounds:CGRectMake(0,0,320, 475)];
    
    self.selectedItem = [self.datasource objectAtIndex:[self.pickerView selectedRowInComponent:0]];
}

- (IBAction)attachAction:(id)sender {
}

- (IBAction)dueDateAction:(id)sender {
    [self setBugProperties:DUE_DATE];
    
    if ([[self.actionSheet subviews]containsObject:self.datePicker] && [[self.actionSheet subviews]containsObject:self.pickerDateToolbar]) {
        [self.pickerDateToolbar removeFromSuperview];
        [self.pickerView removeFromSuperview];
        [self.datePicker removeFromSuperview];
    }
    [self.datasource removeAllObjects];
    [self.datasource addObjectsFromArray:self.reproducible];
    
//    [self.datePicker reloadAllComponents];
    
    [self.actionSheet addSubview:self.pickerDateToolbar];
    [self.actionSheet addSubview:self.datePicker];
    [self.actionSheet showInView:self.view];
    [self.actionSheet setBounds:CGRectMake(0,0,320, 475)];
    
//    NSLog(@"selected %@",[self.datasource objectAtIndex:[self.pickerView selectedRowInComponent:0]]);
//    self.selectedItem = [self.datasource objectAtIndex:[self.pickerView selectedRowInComponent:0]];
    NSDateFormatter *df = [[NSDateFormatter alloc] init];
	df.dateStyle = NSDateFormatterMediumStyle;
	NSString *selDate = [NSString stringWithFormat:@"%@",
                         [df stringFromDate:self.datePicker.date]];
    self.selectedItem = selDate;
}

- (void)DatePickerDoneClick{
    if (self.bugProperties == SEVERITY) {
        [self.severityButton setTitle:self.selectedItem forState:UIControlStateNormal];

        self.bugSeverity = self.selectedItem;
    }else if (self.bugProperties == REPRODUCIBLE){
        [self.reproducibleButton setTitle:self.selectedItem forState:UIControlStateNormal];
        
        self.bugReproducible = self.selectedItem;
    }else if (self.bugProperties == DUE_DATE){
        [self.dueDateButton setTitle:self.selectedItem forState:UIControlStateNormal];
        
        self.bugDate = self.datePicker.date;
    }
    
    [self.actionSheet dismissWithClickedButtonIndex:0 animated:YES];
}

@end
